#!/usr/bin/env ts-node

import { createPromptbookLibraryFromSources } from '@promptbook/core';
import { JavascriptEvalExecutionTools } from '@promptbook/execute-javascript';
import { OpenAiExecutionTools } from '@promptbook/openai';
import colors from 'colors';
import * as dotenv from 'dotenv';
import { readFile } from 'fs/promises';

if (process.cwd().split(/[\\/]/).pop() !== 'promptbook') {
    console.error(colors.red(`CWD must be root of the project`));
    process.exit(1);
}

dotenv.config({ path: '.env' });

main();

async function main() {
    console.info(colors.bgWhite('üî¥ Testing logging capabilities of PromptBook'));

    const library = createPromptbookLibraryFromSources(
        await readFile('./samples/templates/50-advanced.ptbk.md', 'utf-8'),
    );

    const tools = {
        natural: new OpenAiExecutionTools({
            isVerbose: true,
            openAiApiKey: process.env.OPENAI_API_KEY,
        }),
        script: [
            new JavascriptEvalExecutionTools({
                isVerbose: true,
            }),
        ],
        userInterface: null,
    };

    const promptbookExecutor = library.createExecutor('advanced', tools);

    const inputParameters = { word: 'cat' };
    const { isSuccessful, errors, outputParameters } = await promptbookExecutor(inputParameters);

    assertsExecutionSuccessful({ isSuccessful, errors });

    console.info(outputParameters);
}

/**
 * TODO: [üà¥][‚öæÔ∏è] !!! Identify PROMPTBOOKs by URL
 * TODO: [‚öæÔ∏è] No need to set this script or userInterface in tools
 * TODO: [‚öæÔ∏è] Use PromptbookLibrary.fromDirectory (directory vs folder)
 * TODO: [‚öæÔ∏è] Also sample with Wizzard
 */
